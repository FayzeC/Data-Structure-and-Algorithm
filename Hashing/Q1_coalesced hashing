#include <stdio.h>
#include <stdlib.h>

#define TABLESIZE 37
#define PRIME     13

enum Marker {EMPTY,USED};

typedef struct _slot{
  int key;
  enum Marker indicator;
  int next;
} HashSlot;

int HashInsert(int key, HashSlot hashTable[]);
int HashFind(int key, HashSlot hashTable[]);

int hash(int key)
{
  return (key % TABLESIZE);
}

int main()
{
  int opt;
  int i;
  int key;
  int index;
  HashSlot hashTable[TABLESIZE];

  for(i=0;i<TABLESIZE;i++){
    hashTable[i].next = -1;
    hashTable[i].key = 0;
    hashTable[i].indicator = EMPTY;
  }

  printf("============= Hash Table ============\n");
  printf("|1. Insert a key to the hash table  |\n");
  printf("|2. Search a key in the hash table  |\n");
  printf("|3. Print the hash table            |\n");
  printf("|4. Quit                            |\n");
  printf("=====================================\n");

  printf("Enter selection: ");
  scanf("%d",&opt);
  while(opt>=1 && opt <=3){
    switch(opt){
    case 1:
      printf("Enter a key to be inserted:\n");
      scanf("%d",&key);
      index = HashInsert(key,hashTable);
      if(index <0)
          printf("Duplicate key\n");
      else if(index < TABLESIZE)
          printf("Insert %d at index %d\n",key, index);
      else
          printf("Table is full.\n");
      break;
    case 2:
      printf("Enter a key for searching in the HashTable:\n");
      scanf("%d",&key);
      index = HashFind(key, hashTable);

      if(index!=-1)
          printf("%d is found at index %d.\n",key,index);
      else
          printf("%d is not found.\n",key);
      break;

    case 3:
      printf("index:\t key \t next\n");
      for(i=0;i<TABLESIZE;i++) printf("%d\t%d\t%d\n",i, hashTable[i].key,hashTable[i].next);
      break;
    }
    printf("Enter selection: ");
    scanf("%d",&opt);
  }
  return 0;
}

int HashInsert(int key, HashSlot hashTable[])
{
  // Write your code here
  int index = hash(key), probe = index, slot = index;

  // if slot is empty insert
  if(hashTable[slot].indicator == EMPTY){
    hashTable[slot].key = key;
    hashTable[slot].indicator = USED;
  }else{ // else if slot is used
    while(hashTable[probe].indicator == USED){ // loop through until an empty slot is found
      if(hashTable[probe].key == key) return -1; // check duplicate
      if(hashTable[probe].next == -1) break; // no more link
      probe = hashTable[probe].next;
    }

    slot = hash(key + 1); // find new slot index
    if(hashTable[slot].indicator == EMPTY){ // if new slot is empty then just insert
      hashTable[slot].key = key;
      hashTable[slot].indicator = USED;
    }else{ // else if new slot is used
      while(hashTable[slot].indicator == USED){ // loop through until empty slot is found, new index is stored in slot variable
        slot = hash(slot + 1);
        if(slot == index) return TABLESIZE;
      }
      hashTable[slot].key = key; // insert key
      hashTable[slot].indicator = USED;
    }
    if(slot != probe) hashTable[probe].next = slot;
  }
  return slot;
}

int HashFind(int key, HashSlot hashTable[])
{
  // Write your code here
  int index = hash(key), slot = index;

  while(hashTable[slot].indicator == USED){
    if(hashTable[slot].key == key) return slot; // key is found
    slot = hashTable[slot].next; // get link
    if(slot == -1 || slot == index) break; // if no more links or loop back to start
  }
  return -1; // key not found
}
